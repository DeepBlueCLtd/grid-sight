{"version":3,"file":"grid-sight.mjs","sources":["../src/core/events.ts","../src/enrichments/heatmap.ts","../src/enrichments/zscore.ts","../src/ui/contextMenu.ts","../src/ui/tableToggle.ts","../src/core/tableDetection.ts","../src/index.ts"],"sourcesContent":["/**\n * Event handling system for Grid-Sight\n * Implements an event-driven architecture with custom browser events\n */\n\n// Define custom event types\nexport const EVENTS = {\n  TABLE_DETECTED: 'grid-sight:table-detected',\n  TOGGLE_ACTIVATED: 'grid-sight:toggle-activated',\n  TOGGLE_DEACTIVATED: 'grid-sight:toggle-deactivated',\n  ENRICHMENT_APPLIED: 'grid-sight:enrichment-applied',\n  ENRICHMENT_REMOVED: 'grid-sight:enrichment-removed'\n}\n\n/**\n * Set up global event listeners for Grid-Sight\n */\nexport const setupEventListeners = (): void => {\n  // Listen for toggle activation\n  document.addEventListener(EVENTS.TOGGLE_ACTIVATED, (event: Event) => {\n    const customEvent = event as CustomEvent\n    const tableElement = customEvent.detail.tableElement\n    \n    // Add activation class to the table\n    tableElement.classList.add('grid-sight-active')\n    \n    console.log('Grid-Sight activated for table:', tableElement)\n  })\n  \n  // Listen for toggle deactivation\n  document.addEventListener(EVENTS.TOGGLE_DEACTIVATED, (event: Event) => {\n    const customEvent = event as CustomEvent\n    const tableElement = customEvent.detail.tableElement\n    \n    // Remove activation class from the table\n    tableElement.classList.remove('grid-sight-active')\n    \n    console.log('Grid-Sight deactivated for table:', tableElement)\n  })\n}\n\n/**\n * Dispatch a custom Grid-Sight event\n * @param eventName - The name of the event to dispatch\n * @param detail - The event details/payload\n */\nexport const dispatchGridSightEvent = (\n  eventName: string, \n  detail: Record<string, unknown>\n): void => {\n  const event = new CustomEvent(eventName, {\n    bubbles: true,\n    detail\n  })\n  \n  document.dispatchEvent(event)\n}","/**\n * Heatmap enrichment module\n * Applies color shading to numeric cells based on their values\n */\n\n/**\n * Apply heatmap coloring to a selection of cells\n * @param cells - Array of table cells to apply heatmap to\n */\nexport const applyHeatmap = (cells: HTMLTableCellElement[]): void => {\n  // Extract numeric values from cells\n  const numericValues: { cell: HTMLTableCellElement; value: number }[] = []\n  \n  cells.forEach(cell => {\n    const value = parseFloat(cell.textContent?.trim() || '')\n    \n    if (!isNaN(value)) {\n      numericValues.push({ cell, value })\n    } else {\n      // Non-numeric cells should be ignored or assigned neutral color\n      cell.style.backgroundColor = 'transparent'\n    }\n  })\n  \n  // If no numeric values found, exit\n  if (numericValues.length === 0) return\n  \n  // Find min and max values for scaling\n  const values = numericValues.map(item => item.value)\n  const minValue = Math.min(...values)\n  const maxValue = Math.max(...values)\n  \n  // Apply color shading based on value range\n  numericValues.forEach(({ cell, value }) => {\n    // Calculate normalized value between 0 and 1\n    const normalizedValue = (value - minValue) / (maxValue - minValue)\n    \n    // Apply color based on normalized value\n    const color = getHeatmapColor(normalizedValue)\n    cell.style.backgroundColor = color\n  })\n}\n\n/**\n * Get a color for the heatmap based on normalized value (0-1)\n * @param normalizedValue - Value between 0 and 1\n * @returns CSS color string\n */\nexport const getHeatmapColor = (normalizedValue: number): string => {\n  // Simple blue to red gradient\n  // Blue for low values, red for high values\n  const r = Math.round(normalizedValue * 255)\n  const b = Math.round((1 - normalizedValue) * 255)\n  const g = 0\n  \n  return `rgb(${r}, ${g}, ${b})`\n}\n\n/**\n * Remove heatmap coloring from cells\n * @param cells - Array of table cells to remove heatmap from\n */\nexport const removeHeatmap = (cells: HTMLTableCellElement[]): void => {\n  cells.forEach(cell => {\n    cell.style.backgroundColor = ''\n  })\n}","/**\n * Z-Score enrichment module\n * Identifies outliers in numeric data using Z-score calculation\n */\n\n/**\n * Calculate Z-scores for a set of numeric values\n * @param values - Array of numeric values\n * @returns Array of Z-scores corresponding to the input values\n */\nexport const calculateZScores = (values: number[]): number[] => {\n  // Calculate mean\n  const mean = values.reduce((sum, value) => sum + value, 0) / values.length\n  \n  // Calculate standard deviation\n  const squaredDifferences = values.map(value => Math.pow(value - mean, 2))\n  const variance = squaredDifferences.reduce((sum, value) => sum + value, 0) / values.length\n  const stdDev = Math.sqrt(variance)\n  \n  // Calculate Z-scores\n  return values.map(value => (value - mean) / (stdDev || 1)) // Avoid division by zero\n}\n\n/**\n * Identify outliers based on Z-scores and a threshold\n * @param cells - Array of table cells to analyze\n * @param threshold - Z-score threshold for outlier detection (default: 2.0)\n * @returns Object containing outlier cells and their Z-scores\n */\nexport const identifyOutliers = (\n  cells: HTMLTableCellElement[],\n  threshold = 2.0\n): { cell: HTMLTableCellElement; value: number; zScore: number }[] => {\n  // Extract numeric values from cells\n  const numericData: { cell: HTMLTableCellElement; value: number }[] = []\n  \n  cells.forEach(cell => {\n    const value = parseFloat(cell.textContent?.trim() || '')\n    \n    if (!isNaN(value)) {\n      numericData.push({ cell, value })\n    }\n  })\n  \n  // If no numeric values found, return empty array\n  if (numericData.length === 0) return []\n  \n  // Calculate Z-scores\n  const values = numericData.map(item => item.value)\n  const zScores = calculateZScores(values)\n  \n  // Identify outliers\n  const outliers = numericData.map((item, index) => ({\n    cell: item.cell,\n    value: item.value,\n    zScore: zScores[index]\n  })).filter(item => Math.abs(item.zScore) > threshold)\n  \n  return outliers\n}\n\n/**\n * Apply visual highlighting to outlier cells\n * @param outliers - Array of outlier cells with their Z-scores\n */\nexport const highlightOutliers = (\n  outliers: { cell: HTMLTableCellElement; value: number; zScore: number }[]\n): void => {\n  outliers.forEach(({ cell, zScore }) => {\n    // Add outlier class and data attribute\n    cell.classList.add('grid-sight-outlier')\n    cell.setAttribute('data-zscore', zScore.toFixed(2))\n    \n    // Add visual indicator\n    const isPositive = zScore > 0\n    \n    cell.style.border = `2px solid ${isPositive ? 'red' : 'blue'}`\n    cell.style.position = 'relative'\n    \n    // Add tooltip with Z-score information\n    cell.title = `Z-Score: ${zScore.toFixed(2)}`\n  })\n}\n\n/**\n * Remove outlier highlighting from cells\n * @param cells - Array of table cells to remove highlighting from\n */\nexport const removeOutlierHighlighting = (cells: HTMLTableCellElement[]): void => {\n  cells.forEach(cell => {\n    cell.classList.remove('grid-sight-outlier')\n    cell.removeAttribute('data-zscore')\n    cell.style.border = ''\n    cell.title = ''\n  })\n}","/**\n * Context menu component for Grid-Sight\n */\n\nimport { applyHeatmap, removeHeatmap } from '../enrichments/heatmap'\nimport { identifyOutliers, highlightOutliers, removeOutlierHighlighting } from '../enrichments/zscore'\nimport { dispatchGridSightEvent, EVENTS } from '../core/events'\n\n/**\n * Create and show a context menu for a plus icon\n * @param event - The click event\n * @param tableElement - The table element\n * @param isColumn - Whether this is a column header (true) or row header (false)\n */\nexport const showContextMenu = (\n  event: MouseEvent, \n  tableElement: HTMLTableElement, \n  isColumn: boolean\n): void => {\n  event.preventDefault()\n  event.stopPropagation()\n  \n  // Remove any existing context menus\n  removeContextMenu()\n  \n  // Create context menu\n  const contextMenu = document.createElement('div')\n  contextMenu.className = 'grid-sight-context-menu'\n  \n  // Add menu items\n  const menuItems = [\n    { label: 'Apply Heatmap', action: () => applyHeatmapToSelection(tableElement, isColumn, event.target as HTMLElement) },\n    { label: 'Detect Outliers', action: () => detectOutliers(tableElement, isColumn, event.target as HTMLElement) },\n    { label: 'Clear Enrichments', action: () => clearEnrichments(tableElement, isColumn, event.target as HTMLElement) }\n  ]\n  \n  menuItems.forEach(item => {\n    const menuItem = document.createElement('div')\n    menuItem.className = 'grid-sight-context-menu-item'\n    menuItem.textContent = item.label\n    menuItem.addEventListener('click', () => {\n      item.action()\n      removeContextMenu()\n    })\n    contextMenu.appendChild(menuItem)\n  })\n  \n  // Position the menu near the click\n  contextMenu.style.position = 'absolute'\n  contextMenu.style.left = `${event.pageX}px`\n  contextMenu.style.top = `${event.pageY}px`\n  \n  // Add to document\n  document.body.appendChild(contextMenu)\n  \n  // Close menu when clicking outside\n  document.addEventListener('click', removeContextMenu, { once: true })\n}\n\n/**\n * Remove any open context menu\n */\nexport const removeContextMenu = (): void => {\n  const existingMenu = document.querySelector('.grid-sight-context-menu')\n  if (existingMenu) {\n    existingMenu.remove()\n  }\n}\n\n/**\n * Apply heatmap to a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to apply to a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst applyHeatmapToSelection = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Apply heatmap to the selected cells\n    applyHeatmap(cells)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_APPLIED, {\n      tableElement,\n      enrichmentType: 'heatmap',\n      cells\n    })\n  }\n}\n\n/**\n * Detect outliers in a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to apply to a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst detectOutliers = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Identify outliers using Z-score\n    const outliers = identifyOutliers(cells)\n    \n    // Highlight the outliers\n    highlightOutliers(outliers)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_APPLIED, {\n      tableElement,\n      enrichmentType: 'zscore',\n      cells,\n      outliers\n    })\n  }\n}\n\n/**\n * Clear all enrichments from a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to clear a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst clearEnrichments = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Remove heatmap\n    removeHeatmap(cells)\n    \n    // Remove outlier highlighting\n    removeOutlierHighlighting(cells)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_REMOVED, {\n      tableElement,\n      cells\n    })\n  }\n}\n\n/**\n * Get cells for a column or row selection\n * @param tableElement - The table element\n * @param isColumn - Whether to get cells for a column (true) or row (false)\n * @param targetElement - The element that was clicked\n * @returns Array of table cell elements\n */\nconst getCellsForSelection = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): HTMLTableCellElement[] => {\n  const cells: HTMLTableCellElement[] = []\n  \n  if (isColumn) {\n    // Find the column index\n    const headerRow = tableElement.querySelector('thead tr')\n    if (!headerRow) return cells\n    \n    const headerCells = Array.from(headerRow.querySelectorAll('th'))\n    let columnIndex = -1\n    \n    // Find which header contains the target element\n    headerCells.forEach((cell, index) => {\n      if (cell.contains(targetElement)) {\n        columnIndex = index\n      }\n    })\n    \n    if (columnIndex === -1) return cells\n    \n    // Get all cells in this column (skip header)\n    const rows = tableElement.querySelectorAll('tbody tr')\n    rows.forEach(row => {\n      const cell = row.querySelectorAll('td')[columnIndex]\n      if (cell) {\n        cells.push(cell as HTMLTableCellElement)\n      }\n    })\n  } else {\n    // Find the row\n    const rows = Array.from(tableElement.querySelectorAll('tbody tr'))\n    let targetRow: Element | null = null\n    \n    // Find which row contains the target element\n    for (const row of rows) {\n      if (row.contains(targetElement)) {\n        targetRow = row\n        break\n      }\n    }\n    \n    if (!targetRow) return cells\n    \n    // Get all cells in this row (skip first cell if it's the one with the plus icon)\n    const rowCells = Array.from(targetRow.querySelectorAll('td'))\n    \n    // If the first cell contains the target, we want all cells except the first\n    if (rowCells[0] && (rowCells[0] as Element).contains(targetElement)) {\n      cells.push(...rowCells.slice(1) as HTMLTableCellElement[])\n    } else {\n      // Otherwise get all cells\n      cells.push(...rowCells as HTMLTableCellElement[])\n    }\n  }\n  \n  return cells\n}","/**\n * UI component for the Grid-Sight toggle button\n */\n\nimport { dispatchGridSightEvent, EVENTS } from '../core/events'\nimport { showContextMenu } from './contextMenu'\n\n/**\n * Create and inject a Grid-Sight toggle button for a table\n * @param table - The table element to create a toggle for\n */\nexport const createTableToggle = (table: HTMLTableElement): void => {\n  // Create toggle element\n  const toggle = document.createElement('div')\n  toggle.className = 'grid-sight-toggle'\n  toggle.setAttribute('role', 'button')\n  toggle.setAttribute('tabindex', '0')\n  toggle.setAttribute('aria-label', 'Toggle Grid-Sight data visualization')\n  \n  // Set initial state\n  let isActive = false\n  updateToggleState(toggle, isActive)\n  \n  // Position the toggle near the top-right of the table\n  positionToggle(toggle, table)\n  \n  // Add click event listener\n  toggle.addEventListener('click', () => {\n    isActive = !isActive\n    updateToggleState(toggle, isActive)\n    \n    // Dispatch appropriate event\n    if (isActive) {\n      dispatchGridSightEvent(EVENTS.TOGGLE_ACTIVATED, { tableElement: table })\n      addPlusIcons(table)\n    } else {\n      dispatchGridSightEvent(EVENTS.TOGGLE_DEACTIVATED, { tableElement: table })\n      removePlusIcons(table)\n    }\n  })\n  \n  // Add keyboard event listener for accessibility\n  toggle.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      toggle.click()\n    }\n  })\n  \n  // Add the toggle to the document\n  document.body.appendChild(toggle)\n}\n\n/**\n * Update the toggle button's visual state\n * @param toggle - The toggle element\n * @param isActive - Whether the toggle is active\n */\nconst updateToggleState = (toggle: HTMLElement, isActive: boolean): void => {\n  if (isActive) {\n    toggle.classList.add('active')\n    toggle.setAttribute('aria-pressed', 'true')\n    toggle.textContent = 'GS'\n  } else {\n    toggle.classList.remove('active')\n    toggle.setAttribute('aria-pressed', 'false')\n    toggle.textContent = 'GS'\n  }\n}\n\n/**\n * Position the toggle button relative to the table\n * @param toggle - The toggle element\n * @param table - The table element\n */\nconst positionToggle = (toggle: HTMLElement, table: HTMLTableElement): void => {\n  const tableRect = table.getBoundingClientRect()\n  \n  // Position the toggle at the top-right of the table\n  toggle.style.position = 'absolute'\n  toggle.style.top = `${tableRect.top + window.scrollY}px`\n  toggle.style.left = `${tableRect.right + window.scrollX - 40}px`\n  \n  // Add basic styling\n  toggle.style.backgroundColor = '#2c3e50'\n  toggle.style.color = 'white'\n  toggle.style.padding = '4px 8px'\n  toggle.style.borderRadius = '4px'\n  toggle.style.cursor = 'pointer'\n  toggle.style.zIndex = '1000'\n  toggle.style.fontSize = '14px'\n  toggle.style.fontWeight = 'bold'\n}\n\n/**\n * Add plus icons to table headers when Grid-Sight is activated\n * @param table - The table element\n */\nconst addPlusIcons = (table: HTMLTableElement): void => {\n  // Add plus icons to column headers\n  const headerCells = table.querySelectorAll('thead th')\n  headerCells.forEach(cell => {\n    const plusIcon = document.createElement('span')\n    plusIcon.className = 'grid-sight-plus-icon'\n    plusIcon.textContent = '+'\n    plusIcon.style.marginLeft = '5px'\n    plusIcon.style.cursor = 'pointer'\n    \n    // Add click event to show context menu\n    plusIcon.addEventListener('click', (event) => {\n      showContextMenu(event as MouseEvent, table, true) // true for column\n    })\n    \n    // Add keyboard accessibility\n    plusIcon.setAttribute('tabindex', '0')\n    plusIcon.setAttribute('role', 'button')\n    plusIcon.setAttribute('aria-label', 'Show column options')\n    plusIcon.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        plusIcon.click()\n      }\n    })\n    \n    cell.appendChild(plusIcon)\n  })\n  \n  // Add plus icons to the first cell of each row in tbody\n  const rows = table.querySelectorAll('tbody tr')\n  rows.forEach(row => {\n    const firstCell = row.querySelector('td')\n    if (firstCell) {\n      const plusIcon = document.createElement('span')\n      plusIcon.className = 'grid-sight-plus-icon'\n      plusIcon.textContent = '+'\n      plusIcon.style.marginRight = '5px'\n      plusIcon.style.cursor = 'pointer'\n      \n      // Add click event to show context menu\n      plusIcon.addEventListener('click', (event) => {\n        showContextMenu(event as MouseEvent, table, false) // false for row\n      })\n      \n      // Add keyboard accessibility\n      plusIcon.setAttribute('tabindex', '0')\n      plusIcon.setAttribute('role', 'button')\n      plusIcon.setAttribute('aria-label', 'Show row options')\n      plusIcon.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n          event.preventDefault()\n          plusIcon.click()\n        }\n      })\n      \n      firstCell.insertBefore(plusIcon, firstCell.firstChild)\n    }\n  })\n}\n\n/**\n * Remove plus icons from table when Grid-Sight is deactivated\n * @param table - The table element\n */\nconst removePlusIcons = (table: HTMLTableElement): void => {\n  const plusIcons = table.querySelectorAll('.grid-sight-plus-icon')\n  plusIcons.forEach(icon => {\n    icon.remove()\n  })\n}","/**\n * Table detection module\n * Responsible for finding valid HTML tables on the page\n */\n\nimport { createTableToggle } from '../ui/tableToggle'\n\n/**\n * Checks if a table has the required structure (thead and tbody)\n * @param table - The HTML table element to check\n * @returns boolean indicating if the table has valid structure\n */\nexport const isValidTable = (table: HTMLTableElement): boolean => {\n  const hasThead = !!table.querySelector('thead')\n  const hasTbody = !!table.querySelector('tbody')\n  \n  if (!hasThead || !hasTbody) {\n    console.error('Grid-Sight: invalid table structure - missing thead or tbody')\n    return false\n  }\n  \n  return true\n}\n\n/**\n * Process a single table element\n * @param table - The HTML table element to process\n */\nexport const processTable = (table: HTMLTableElement): void => {\n  if (!isValidTable(table)) return\n  \n  // Create and inject the Grid-Sight toggle\n  createTableToggle(table)\n}\n\n/**\n * Initialize the table detection functionality\n * Finds all tables on the page and processes them\n */\nexport const initTableDetection = (): void => {\n  // Find all tables on the page\n  const tables = document.querySelectorAll('table')\n  \n  // Process each table\n  tables.forEach(table => {\n    processTable(table as HTMLTableElement)\n  })\n  \n  // Set up mutation observer to detect dynamically added tables\n  setupTableObserver()\n}\n\n/**\n * Sets up a MutationObserver to detect tables added dynamically to the DOM\n */\nconst setupTableObserver = (): void => {\n  const observer = new MutationObserver(mutations => {\n    mutations.forEach(mutation => {\n      mutation.addedNodes.forEach(node => {\n        // Check if the added node is a table\n        if (node.nodeName === 'TABLE') {\n          processTable(node as HTMLTableElement)\n        }\n        \n        // Check for tables within added nodes\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          const tables = (node as Element).querySelectorAll('table')\n          tables.forEach(table => {\n            processTable(table as HTMLTableElement)\n          })\n        }\n      })\n    })\n  })\n  \n  // Start observing the document body for DOM changes\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n}","/**\n * Grid-Sight - A library for enriching HTML tables with data visualization and analysis tools\n * @module grid-sight\n */\n\nimport { initTableDetection } from './core/tableDetection'\nimport { setupEventListeners } from './core/events'\nimport { version } from '../package.json'\nimport './ui/styles.css'\n\n/**\n * Initialize Grid-Sight\n * @returns {void}\n */\nexport function initialize(): void {\n  console.log(`Grid-Sight v${version} initialized`)\n  \n  // Set up event listeners for the application\n  setupEventListeners()\n  \n  // Start table detection\n  initTableDetection()\n}\n\n// Auto-initialize when loaded as a script\nif (typeof window !== 'undefined') {\n  window.addEventListener('DOMContentLoaded', () => {\n    initialize()\n  })\n}"],"names":["EVENTS","setupEventListeners","event","tableElement","dispatchGridSightEvent","eventName","detail","applyHeatmap","cells","numericValues","cell","_a","value","values","item","minValue","maxValue","normalizedValue","color","getHeatmapColor","r","b","removeHeatmap","calculateZScores","mean","sum","variance","stdDev","identifyOutliers","threshold","numericData","zScores","index","highlightOutliers","outliers","zScore","isPositive","removeOutlierHighlighting","showContextMenu","isColumn","removeContextMenu","contextMenu","applyHeatmapToSelection","detectOutliers","clearEnrichments","menuItem","existingMenu","targetElement","getCellsForSelection","headerRow","headerCells","columnIndex","row","rows","targetRow","rowCells","createTableToggle","table","toggle","isActive","updateToggleState","positionToggle","addPlusIcons","removePlusIcons","tableRect","plusIcon","firstCell","icon","isValidTable","hasThead","hasTbody","processTable","initTableDetection","setupTableObserver","mutations","mutation","node","initialize","version"],"mappings":"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"}