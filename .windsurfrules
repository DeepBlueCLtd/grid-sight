# Cascade AI Assistant Rules for the Grid-Sight Project
# Derived from documents in the /documents folder.
# These rules supplement any global user preferences.

## Technology & Stack
1.  The project's core language is TypeScript, configured with strict mode and ESNext features. (Source: GridSight_Tech_Stack.md)
2.  Use ESLint and Prettier for linting and code formatting. (Source: GridSight_Tech_Stack.md)
3.  Employ Jest for unit and integration testing, and Playwright for end-to-end testing. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md)
4.  Write Behavior-Driven Development (BDD) tests using Gherkin syntax (Given/When/Then). (Source: BDD_prompts.md)
5.  Utilize Vite as the build system for both development and production builds. (Source: GridSight_Tech_Stack.md)
6.  Implement UI features using direct DOM manipulation; avoid introducing general-purpose UI frameworks. (Source: GridSight_Tech_Stack.md)
7.  Manage state using Valtio (proxy-based state). (Source: GridSight_Tech_Stack.md)
8.  For data visualization, use uPlot for charts and custom SVG for overlays. (Source: GridSight_Tech_Stack.md)
9.  Minimize external dependencies. Prefer well-maintained, small-footprint libraries. (Source: GridSight_Tech_Stack.md)

## Code & Architecture
10. Structure the codebase with modules primarily under `src/core`, `src/enrichments`, and `src/ui`. (Source: GridSight_Tech_Stack.md, ROADMAP.md)
11. Design the internal API using an event-driven architecture with custom browser events. (Source: GridSight_Tech_Stack.md)
12. Ensure code is maintainable with clear comments and a modular design. (Source: GridSight_Requirements.md - NFR4)
13. Branch Naming and PRs: Link Pull Requests to roadmap thread IDs (e.g., `feature/c1-heatmaps`). Branch names should reflect the feature or task. (Source: ROADMAP.md)

## Functionality & Behavior Specifics
14. Table Detection Logic:
    - Grid-Sight must automatically detect HTML `<table>` elements on a page. (Source: GridSight_Requirements.md - FR1)
    - The Grid-Sight toggle should only be injected for tables that possess both `<thead>` and `<tbody>` elements. (Source: GridSight_Requirements.md - FR2)
    - For tables lacking either `<thead>` or `<tbody>`, do not inject the toggle and log an error message like "invalid table structure". (Source: GridSight_Requirements.md - FR3, BDD_Steps.md)
    - Ensure that tables dynamically added to the DOM via JavaScript are also detected and processed. (Source: GridSight_Requirements.md - FR4)
15. Heatmap Enrichment:
    - Cell shading for heatmaps must be based on numeric values, scaled between the minimum and maximum values in the selection. (Source: GridSight_Requirements.md - FR8, BDD_Steps.md)
    - Non-numeric cells within a heatmap selection should be ignored or assigned a default neutral color. (Source: GridSight_Requirements.md - FR9, BDD_Steps.md)
16. Z-score Enrichment:
    - Outliers should be identified using a Z-score. This threshold must be configurable by the user. (Source: GridSight_Requirements.md - FR11)
    - The default Z-score threshold is 2.0. (Source: BDD_Steps.md)
17. Configuration Management:
    - All per-table settings (such as active enrichments, heatmap color schemes, Z-score thresholds) must be configurable independently for each table. (Source: GridSight_Requirements.md - FR14)
18. Data Export:
    - The CSV export feature must include the original table data along with any applied enrichment metadata (e.g., calculated z-scores). (Source: GridSight_Requirements.md - FR15, BDD_Steps.md)

## Standards & Quality Assurance
19. Browser Compatibility: The application must be compatible with the latest two stable versions of Chrome, Firefox, Safari, and Edge. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md - NFR2)
20. Performance Targets: Aim for interaction latency below 50ms and initial load/enrichment time under 200ms for identified tables. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md - NFR1)
21. Security Practices:
    - Always sanitize data before rendering it in the DOM. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md - NFR6)
    - Avoid using `innerHTML` with dynamic content unless explicitly reviewed for safety. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md - NFR6)
    - Do not use `eval()` or similar dynamic code execution functions with user-provided data. (Source: GridSight_Requirements.md - NFR6)
22. Accessibility: Strive for WCAG 2.1 Level AA compliance for all user interface elements. (Source: GridSight_Tech_Stack.md, GridSight_Requirements.md - NFR7)
