{"version":3,"file":"grid-sight.umd.js","sources":["../src/core/events.ts","../src/enrichments/heatmap.ts","../src/enrichments/zscore.ts","../src/ui/contextMenu.ts","../src/ui/tableToggle.ts","../src/core/tableDetection.ts","../src/index.ts"],"sourcesContent":["/**\n * Event handling system for Grid-Sight\n * Implements an event-driven architecture with custom browser events\n */\n\n// Define custom event types\nexport const EVENTS = {\n  TABLE_DETECTED: 'grid-sight:table-detected',\n  TOGGLE_ACTIVATED: 'grid-sight:toggle-activated',\n  TOGGLE_DEACTIVATED: 'grid-sight:toggle-deactivated',\n  ENRICHMENT_APPLIED: 'grid-sight:enrichment-applied',\n  ENRICHMENT_REMOVED: 'grid-sight:enrichment-removed'\n}\n\n/**\n * Set up global event listeners for Grid-Sight\n */\nexport const setupEventListeners = (): void => {\n  // Listen for toggle activation\n  document.addEventListener(EVENTS.TOGGLE_ACTIVATED, (event: Event) => {\n    const customEvent = event as CustomEvent\n    const tableElement = customEvent.detail.tableElement\n    \n    // Add activation class to the table\n    tableElement.classList.add('grid-sight-active')\n    \n    console.log('Grid-Sight activated for table:', tableElement)\n  })\n  \n  // Listen for toggle deactivation\n  document.addEventListener(EVENTS.TOGGLE_DEACTIVATED, (event: Event) => {\n    const customEvent = event as CustomEvent\n    const tableElement = customEvent.detail.tableElement\n    \n    // Remove activation class from the table\n    tableElement.classList.remove('grid-sight-active')\n    \n    console.log('Grid-Sight deactivated for table:', tableElement)\n  })\n}\n\n/**\n * Dispatch a custom Grid-Sight event\n * @param eventName - The name of the event to dispatch\n * @param detail - The event details/payload\n */\nexport const dispatchGridSightEvent = (\n  eventName: string, \n  detail: Record<string, unknown>\n): void => {\n  const event = new CustomEvent(eventName, {\n    bubbles: true,\n    detail\n  })\n  \n  document.dispatchEvent(event)\n}","/**\n * Heatmap enrichment module\n * Applies color shading to numeric cells based on their values\n */\n\n/**\n * Apply heatmap coloring to a selection of cells\n * @param cells - Array of table cells to apply heatmap to\n */\nexport const applyHeatmap = (cells: HTMLTableCellElement[]): void => {\n  // Extract numeric values from cells\n  const numericValues: { cell: HTMLTableCellElement; value: number }[] = []\n  \n  cells.forEach(cell => {\n    const value = parseFloat(cell.textContent?.trim() || '')\n    \n    if (!isNaN(value)) {\n      numericValues.push({ cell, value })\n    } else {\n      // Non-numeric cells should be ignored or assigned neutral color\n      cell.style.backgroundColor = 'transparent'\n    }\n  })\n  \n  // If no numeric values found, exit\n  if (numericValues.length === 0) return\n  \n  // Find min and max values for scaling\n  const values = numericValues.map(item => item.value)\n  const minValue = Math.min(...values)\n  const maxValue = Math.max(...values)\n  \n  // Apply color shading based on value range\n  numericValues.forEach(({ cell, value }) => {\n    // Calculate normalized value between 0 and 1\n    const normalizedValue = (value - minValue) / (maxValue - minValue)\n    \n    // Apply color based on normalized value\n    const color = getHeatmapColor(normalizedValue)\n    cell.style.backgroundColor = color\n  })\n}\n\n/**\n * Get a color for the heatmap based on normalized value (0-1)\n * @param normalizedValue - Value between 0 and 1\n * @returns CSS color string\n */\nexport const getHeatmapColor = (normalizedValue: number): string => {\n  // Simple blue to red gradient\n  // Blue for low values, red for high values\n  const r = Math.round(normalizedValue * 255)\n  const b = Math.round((1 - normalizedValue) * 255)\n  const g = 0\n  \n  return `rgb(${r}, ${g}, ${b})`\n}\n\n/**\n * Remove heatmap coloring from cells\n * @param cells - Array of table cells to remove heatmap from\n */\nexport const removeHeatmap = (cells: HTMLTableCellElement[]): void => {\n  cells.forEach(cell => {\n    cell.style.backgroundColor = ''\n  })\n}","/**\n * Z-Score enrichment module\n * Identifies outliers in numeric data using Z-score calculation\n */\n\n/**\n * Calculate Z-scores for a set of numeric values\n * @param values - Array of numeric values\n * @returns Array of Z-scores corresponding to the input values\n */\nexport const calculateZScores = (values: number[]): number[] => {\n  // Calculate mean\n  const mean = values.reduce((sum, value) => sum + value, 0) / values.length\n  \n  // Calculate standard deviation\n  const squaredDifferences = values.map(value => Math.pow(value - mean, 2))\n  const variance = squaredDifferences.reduce((sum, value) => sum + value, 0) / values.length\n  const stdDev = Math.sqrt(variance)\n  \n  // Calculate Z-scores\n  return values.map(value => (value - mean) / (stdDev || 1)) // Avoid division by zero\n}\n\n/**\n * Identify outliers based on Z-scores and a threshold\n * @param cells - Array of table cells to analyze\n * @param threshold - Z-score threshold for outlier detection (default: 2.0)\n * @returns Object containing outlier cells and their Z-scores\n */\nexport const identifyOutliers = (\n  cells: HTMLTableCellElement[],\n  threshold = 2.0\n): { cell: HTMLTableCellElement; value: number; zScore: number }[] => {\n  // Extract numeric values from cells\n  const numericData: { cell: HTMLTableCellElement; value: number }[] = []\n  \n  cells.forEach(cell => {\n    const value = parseFloat(cell.textContent?.trim() || '')\n    \n    if (!isNaN(value)) {\n      numericData.push({ cell, value })\n    }\n  })\n  \n  // If no numeric values found, return empty array\n  if (numericData.length === 0) return []\n  \n  // Calculate Z-scores\n  const values = numericData.map(item => item.value)\n  const zScores = calculateZScores(values)\n  \n  // Identify outliers\n  const outliers = numericData.map((item, index) => ({\n    cell: item.cell,\n    value: item.value,\n    zScore: zScores[index]\n  })).filter(item => Math.abs(item.zScore) > threshold)\n  \n  return outliers\n}\n\n/**\n * Apply visual highlighting to outlier cells\n * @param outliers - Array of outlier cells with their Z-scores\n */\nexport const highlightOutliers = (\n  outliers: { cell: HTMLTableCellElement; value: number; zScore: number }[]\n): void => {\n  outliers.forEach(({ cell, zScore }) => {\n    // Add outlier class and data attribute\n    cell.classList.add('grid-sight-outlier')\n    cell.setAttribute('data-zscore', zScore.toFixed(2))\n    \n    // Add visual indicator\n    const isPositive = zScore > 0\n    \n    cell.style.border = `2px solid ${isPositive ? 'red' : 'blue'}`\n    cell.style.position = 'relative'\n    \n    // Add tooltip with Z-score information\n    cell.title = `Z-Score: ${zScore.toFixed(2)}`\n  })\n}\n\n/**\n * Remove outlier highlighting from cells\n * @param cells - Array of table cells to remove highlighting from\n */\nexport const removeOutlierHighlighting = (cells: HTMLTableCellElement[]): void => {\n  cells.forEach(cell => {\n    cell.classList.remove('grid-sight-outlier')\n    cell.removeAttribute('data-zscore')\n    cell.style.border = ''\n    cell.title = ''\n  })\n}","/**\n * Context menu component for Grid-Sight\n */\n\nimport { applyHeatmap, removeHeatmap } from '../enrichments/heatmap'\nimport { identifyOutliers, highlightOutliers, removeOutlierHighlighting } from '../enrichments/zscore'\nimport { dispatchGridSightEvent, EVENTS } from '../core/events'\n\n/**\n * Create and show a context menu for a plus icon\n * @param event - The click event\n * @param tableElement - The table element\n * @param isColumn - Whether this is a column header (true) or row header (false)\n */\nexport const showContextMenu = (\n  event: MouseEvent, \n  tableElement: HTMLTableElement, \n  isColumn: boolean\n): void => {\n  event.preventDefault()\n  event.stopPropagation()\n  \n  // Remove any existing context menus\n  removeContextMenu()\n  \n  // Create context menu\n  const contextMenu = document.createElement('div')\n  contextMenu.className = 'grid-sight-context-menu'\n  \n  // Add menu items\n  const menuItems = [\n    { label: 'Apply Heatmap', action: () => applyHeatmapToSelection(tableElement, isColumn, event.target as HTMLElement) },\n    { label: 'Detect Outliers', action: () => detectOutliers(tableElement, isColumn, event.target as HTMLElement) },\n    { label: 'Clear Enrichments', action: () => clearEnrichments(tableElement, isColumn, event.target as HTMLElement) }\n  ]\n  \n  menuItems.forEach(item => {\n    const menuItem = document.createElement('div')\n    menuItem.className = 'grid-sight-context-menu-item'\n    menuItem.textContent = item.label\n    menuItem.addEventListener('click', () => {\n      item.action()\n      removeContextMenu()\n    })\n    contextMenu.appendChild(menuItem)\n  })\n  \n  // Position the menu near the click\n  contextMenu.style.position = 'absolute'\n  contextMenu.style.left = `${event.pageX}px`\n  contextMenu.style.top = `${event.pageY}px`\n  \n  // Add to document\n  document.body.appendChild(contextMenu)\n  \n  // Close menu when clicking outside\n  document.addEventListener('click', removeContextMenu, { once: true })\n}\n\n/**\n * Remove any open context menu\n */\nexport const removeContextMenu = (): void => {\n  const existingMenu = document.querySelector('.grid-sight-context-menu')\n  if (existingMenu) {\n    existingMenu.remove()\n  }\n}\n\n/**\n * Apply heatmap to a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to apply to a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst applyHeatmapToSelection = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Apply heatmap to the selected cells\n    applyHeatmap(cells)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_APPLIED, {\n      tableElement,\n      enrichmentType: 'heatmap',\n      cells\n    })\n  }\n}\n\n/**\n * Detect outliers in a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to apply to a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst detectOutliers = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Identify outliers using Z-score\n    const outliers = identifyOutliers(cells)\n    \n    // Highlight the outliers\n    highlightOutliers(outliers)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_APPLIED, {\n      tableElement,\n      enrichmentType: 'zscore',\n      cells,\n      outliers\n    })\n  }\n}\n\n/**\n * Clear all enrichments from a column or row\n * @param tableElement - The table element\n * @param isColumn - Whether to clear a column (true) or row (false)\n * @param targetElement - The element that was clicked\n */\nconst clearEnrichments = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): void => {\n  const cells = getCellsForSelection(tableElement, isColumn, targetElement)\n  \n  if (cells.length > 0) {\n    // Remove heatmap\n    removeHeatmap(cells)\n    \n    // Remove outlier highlighting\n    removeOutlierHighlighting(cells)\n    \n    // Dispatch event\n    dispatchGridSightEvent(EVENTS.ENRICHMENT_REMOVED, {\n      tableElement,\n      cells\n    })\n  }\n}\n\n/**\n * Get cells for a column or row selection\n * @param tableElement - The table element\n * @param isColumn - Whether to get cells for a column (true) or row (false)\n * @param targetElement - The element that was clicked\n * @returns Array of table cell elements\n */\nconst getCellsForSelection = (\n  tableElement: HTMLTableElement, \n  isColumn: boolean, \n  targetElement: HTMLElement\n): HTMLTableCellElement[] => {\n  const cells: HTMLTableCellElement[] = []\n  \n  if (isColumn) {\n    // Find the column index\n    const headerRow = tableElement.querySelector('thead tr')\n    if (!headerRow) return cells\n    \n    const headerCells = Array.from(headerRow.querySelectorAll('th'))\n    let columnIndex = -1\n    \n    // Find which header contains the target element\n    headerCells.forEach((cell, index) => {\n      if (cell.contains(targetElement)) {\n        columnIndex = index\n      }\n    })\n    \n    if (columnIndex === -1) return cells\n    \n    // Get all cells in this column (skip header)\n    const rows = tableElement.querySelectorAll('tbody tr')\n    rows.forEach(row => {\n      const cell = row.querySelectorAll('td')[columnIndex]\n      if (cell) {\n        cells.push(cell as HTMLTableCellElement)\n      }\n    })\n  } else {\n    // Find the row\n    const rows = Array.from(tableElement.querySelectorAll('tbody tr'))\n    let targetRow: Element | null = null\n    \n    // Find which row contains the target element\n    for (const row of rows) {\n      if (row.contains(targetElement)) {\n        targetRow = row\n        break\n      }\n    }\n    \n    if (!targetRow) return cells\n    \n    // Get all cells in this row (skip first cell if it's the one with the plus icon)\n    const rowCells = Array.from(targetRow.querySelectorAll('td'))\n    \n    // If the first cell contains the target, we want all cells except the first\n    if (rowCells[0] && (rowCells[0] as Element).contains(targetElement)) {\n      cells.push(...rowCells.slice(1) as HTMLTableCellElement[])\n    } else {\n      // Otherwise get all cells\n      cells.push(...rowCells as HTMLTableCellElement[])\n    }\n  }\n  \n  return cells\n}","/**\n * UI component for the Grid-Sight toggle button\n */\n\nimport { dispatchGridSightEvent, EVENTS } from '../core/events'\nimport { showContextMenu } from './contextMenu'\n\n/**\n * Create and inject a Grid-Sight toggle button for a table\n * @param table - The table element to create a toggle for\n */\nexport const createTableToggle = (table: HTMLTableElement): void => {\n  // Create toggle element\n  const toggle = document.createElement('div')\n  toggle.className = 'grid-sight-toggle'\n  toggle.setAttribute('role', 'button')\n  toggle.setAttribute('tabindex', '0')\n  toggle.setAttribute('aria-label', 'Toggle Grid-Sight data visualization')\n  \n  // Set initial state\n  let isActive = false\n  updateToggleState(toggle, isActive)\n  \n  // Position the toggle near the top-right of the table\n  positionToggle(toggle, table)\n  \n  // Add click event listener\n  toggle.addEventListener('click', () => {\n    isActive = !isActive\n    updateToggleState(toggle, isActive)\n    \n    // Dispatch appropriate event\n    if (isActive) {\n      dispatchGridSightEvent(EVENTS.TOGGLE_ACTIVATED, { tableElement: table })\n      addPlusIcons(table)\n    } else {\n      dispatchGridSightEvent(EVENTS.TOGGLE_DEACTIVATED, { tableElement: table })\n      removePlusIcons(table)\n    }\n  })\n  \n  // Add keyboard event listener for accessibility\n  toggle.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      toggle.click()\n    }\n  })\n  \n  // Add the toggle to the document\n  document.body.appendChild(toggle)\n}\n\n/**\n * Update the toggle button's visual state\n * @param toggle - The toggle element\n * @param isActive - Whether the toggle is active\n */\nconst updateToggleState = (toggle: HTMLElement, isActive: boolean): void => {\n  if (isActive) {\n    toggle.classList.add('active')\n    toggle.setAttribute('aria-pressed', 'true')\n    toggle.textContent = 'GS'\n  } else {\n    toggle.classList.remove('active')\n    toggle.setAttribute('aria-pressed', 'false')\n    toggle.textContent = 'GS'\n  }\n}\n\n/**\n * Position the toggle button relative to the table\n * @param toggle - The toggle element\n * @param table - The table element\n */\nconst positionToggle = (toggle: HTMLElement, table: HTMLTableElement): void => {\n  const tableRect = table.getBoundingClientRect()\n  \n  // Position the toggle at the top-right of the table\n  toggle.style.position = 'absolute'\n  toggle.style.top = `${tableRect.top + window.scrollY}px`\n  toggle.style.left = `${tableRect.right + window.scrollX - 40}px`\n  \n  // Add basic styling\n  toggle.style.backgroundColor = '#2c3e50'\n  toggle.style.color = 'white'\n  toggle.style.padding = '4px 8px'\n  toggle.style.borderRadius = '4px'\n  toggle.style.cursor = 'pointer'\n  toggle.style.zIndex = '1000'\n  toggle.style.fontSize = '14px'\n  toggle.style.fontWeight = 'bold'\n}\n\n/**\n * Add plus icons to table headers when Grid-Sight is activated\n * @param table - The table element\n */\nconst addPlusIcons = (table: HTMLTableElement): void => {\n  // Add plus icons to column headers\n  const headerCells = table.querySelectorAll('thead th')\n  headerCells.forEach(cell => {\n    const plusIcon = document.createElement('span')\n    plusIcon.className = 'grid-sight-plus-icon'\n    plusIcon.textContent = '+'\n    plusIcon.style.marginLeft = '5px'\n    plusIcon.style.cursor = 'pointer'\n    \n    // Add click event to show context menu\n    plusIcon.addEventListener('click', (event) => {\n      showContextMenu(event as MouseEvent, table, true) // true for column\n    })\n    \n    // Add keyboard accessibility\n    plusIcon.setAttribute('tabindex', '0')\n    plusIcon.setAttribute('role', 'button')\n    plusIcon.setAttribute('aria-label', 'Show column options')\n    plusIcon.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        plusIcon.click()\n      }\n    })\n    \n    cell.appendChild(plusIcon)\n  })\n  \n  // Add plus icons to the first cell of each row in tbody\n  const rows = table.querySelectorAll('tbody tr')\n  rows.forEach(row => {\n    const firstCell = row.querySelector('td')\n    if (firstCell) {\n      const plusIcon = document.createElement('span')\n      plusIcon.className = 'grid-sight-plus-icon'\n      plusIcon.textContent = '+'\n      plusIcon.style.marginRight = '5px'\n      plusIcon.style.cursor = 'pointer'\n      \n      // Add click event to show context menu\n      plusIcon.addEventListener('click', (event) => {\n        showContextMenu(event as MouseEvent, table, false) // false for row\n      })\n      \n      // Add keyboard accessibility\n      plusIcon.setAttribute('tabindex', '0')\n      plusIcon.setAttribute('role', 'button')\n      plusIcon.setAttribute('aria-label', 'Show row options')\n      plusIcon.addEventListener('keydown', (event) => {\n        if (event.key === 'Enter' || event.key === ' ') {\n          event.preventDefault()\n          plusIcon.click()\n        }\n      })\n      \n      firstCell.insertBefore(plusIcon, firstCell.firstChild)\n    }\n  })\n}\n\n/**\n * Remove plus icons from table when Grid-Sight is deactivated\n * @param table - The table element\n */\nconst removePlusIcons = (table: HTMLTableElement): void => {\n  const plusIcons = table.querySelectorAll('.grid-sight-plus-icon')\n  plusIcons.forEach(icon => {\n    icon.remove()\n  })\n}","/**\n * Table detection module\n * Responsible for finding valid HTML tables on the page\n */\n\nimport { createTableToggle } from '../ui/tableToggle'\n\n/**\n * Checks if a table has the required structure (thead and tbody)\n * @param table - The HTML table element to check\n * @returns boolean indicating if the table has valid structure\n */\nexport const isValidTable = (table: HTMLTableElement): boolean => {\n  const hasThead = !!table.querySelector('thead')\n  const hasTbody = !!table.querySelector('tbody')\n  \n  if (!hasThead || !hasTbody) {\n    console.error('Grid-Sight: invalid table structure - missing thead or tbody')\n    return false\n  }\n  \n  return true\n}\n\n/**\n * Process a single table element\n * @param table - The HTML table element to process\n */\nexport const processTable = (table: HTMLTableElement): void => {\n  if (!isValidTable(table)) return\n  \n  // Create and inject the Grid-Sight toggle\n  createTableToggle(table)\n}\n\n/**\n * Initialize the table detection functionality\n * Finds all tables on the page and processes them\n */\nexport const initTableDetection = (): void => {\n  // Find all tables on the page\n  const tables = document.querySelectorAll('table')\n  \n  // Process each table\n  tables.forEach(table => {\n    processTable(table as HTMLTableElement)\n  })\n  \n  // Set up mutation observer to detect dynamically added tables\n  setupTableObserver()\n}\n\n/**\n * Sets up a MutationObserver to detect tables added dynamically to the DOM\n */\nconst setupTableObserver = (): void => {\n  const observer = new MutationObserver(mutations => {\n    mutations.forEach(mutation => {\n      mutation.addedNodes.forEach(node => {\n        // Check if the added node is a table\n        if (node.nodeName === 'TABLE') {\n          processTable(node as HTMLTableElement)\n        }\n        \n        // Check for tables within added nodes\n        if (node.nodeType === Node.ELEMENT_NODE) {\n          const tables = (node as Element).querySelectorAll('table')\n          tables.forEach(table => {\n            processTable(table as HTMLTableElement)\n          })\n        }\n      })\n    })\n  })\n  \n  // Start observing the document body for DOM changes\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  })\n}","/**\n * Grid-Sight - A library for enriching HTML tables with data visualization and analysis tools\n * @module grid-sight\n */\n\nimport { initTableDetection } from './core/tableDetection'\nimport { setupEventListeners } from './core/events'\nimport { version } from '../package.json'\nimport './ui/styles.css'\n\n/**\n * Initialize Grid-Sight\n * @returns {void}\n */\nexport function initialize(): void {\n  console.log(`Grid-Sight v${version} initialized`)\n  \n  // Set up event listeners for the application\n  setupEventListeners()\n  \n  // Start table detection\n  initTableDetection()\n}\n\n// Auto-initialize when loaded as a script\nif (typeof window !== 'undefined') {\n  window.addEventListener('DOMContentLoaded', () => {\n    initialize()\n  })\n}"],"names":["EVENTS","setupEventListeners","event","tableElement","dispatchGridSightEvent","eventName","detail","applyHeatmap","cells","numericValues","cell","value","_a","values","item","minValue","maxValue","normalizedValue","color","getHeatmapColor","r","b","removeHeatmap","calculateZScores","mean","sum","variance","stdDev","identifyOutliers","threshold","numericData","zScores","index","highlightOutliers","outliers","zScore","isPositive","removeOutlierHighlighting","showContextMenu","isColumn","removeContextMenu","contextMenu","applyHeatmapToSelection","detectOutliers","clearEnrichments","menuItem","existingMenu","targetElement","getCellsForSelection","headerRow","headerCells","columnIndex","row","rows","targetRow","rowCells","createTableToggle","table","toggle","isActive","updateToggleState","positionToggle","addPlusIcons","removePlusIcons","tableRect","plusIcon","firstCell","icon","isValidTable","hasThead","hasTbody","processTable","initTableDetection","setupTableObserver","mutations","mutation","node","initialize","version"],"mappings":"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"}